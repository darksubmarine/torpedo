// Code generated by Torpedo DO NOT EDIT.

// Package mocks the service base {{.PackageName}}.ServiceBase for testing purpose
package mocks

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"github.com/darksubmarine/torpedo-lib-go/context"
	"github.com/darksubmarine/torpedo-lib-go/tql"
)

type ServiceBase struct {

	Create_ func(ctx context.IDataMap, ety *{{.PackageName}}.{{.EntityName}}) (*{{.PackageName}}.{{.EntityName}}, error)
	Read_ func(ctx context.IDataMap, id string) (*{{.PackageName}}.{{.EntityName}}, error)
	Update_ func(ctx context.IDataMap, ety *{{.PackageName}}.{{.EntityName}}) (*{{.PackageName}}.{{.EntityName}}, error)
	Delete_ func(ctx context.IDataMap, id string) error
	Query_ func(q *tql.Query) (*tql.Result, error)

{{if .HasRelationshipsBelongsTo}}{{range .FetchRelationshipsBelongsTo}}
	BelongsTo{{ .Ref.Name | ToTitle }}_ func({{ .Ref.Name }}Id string, items int64, page int64) ([]*{{$.PackageName}}.{{ $.EntityName }}, error)
	DeleteBy{{ .Ref.Name | ToTitle }}_ func({{ .Ref.Name }}Id string) error
{{end}}{{end}}
}

// Create given a new entity this one is populated with ID and creation timestamp and finally saved into the repository
func (s *ServiceBase) Create(ctx context.IDataMap, ety *{{.PackageName}}.{{.EntityName}}) (*{{.PackageName}}.{{.EntityName}}, error) {
	return s.Create_(ctx, ety)
}

// Read returns a pointer to {{.EntityName}} given its id
func (s *ServiceBase) Read(ctx context.IDataMap, id string) (*{{.PackageName}}.{{.EntityName}}, error) {
	return s.Read_(ctx, id)
}

// Update returns a pointer to {{.EntityName}} after update it
func (s *ServiceBase) Update(ctx context.IDataMap, ety *{{.PackageName}}.{{.EntityName}}) (*{{.PackageName}}.{{.EntityName}}, error) {
	return s.Update_(ctx, ety)
}

// Delete removes the entity given its id
func (s *ServiceBase) Delete(ctx context.IDataMap, id string) error {
	return s.Delete_(ctx, id)
}

// Query executes the given query (TQL) and returns the query result
func (s *ServiceBase) Query(q *tql.Query) (*tql.Result, error) {
	return s.Query_(q)
}

{{if .HasRelationshipsBelongsTo}}{{range .FetchRelationshipsBelongsTo}}
// BelongsTo{{ .Ref.Name | ToTitle }} fetch a list of {{ $.EntityName}} that belongs to {{ .Ref.Name | ToTitle }} given the {{ .Ref.Name }}Id
func (s *ServiceBase) BelongsTo{{ .Ref.Name | ToTitle }}({{ .Ref.Name }}Id string, items int64, page int64) ([]*{{ $.PackageName}}.{{ $.EntityName}}, error) {
	return s.BelongsTo{{ .Ref.Name | ToTitle }}_({{ .Ref.Name }}Id, items, page)
}

// DeleteBy{{ .Ref.Name | ToTitle }} remove all {{ $.Name }} given the {{ .Ref.Name }}Id
func (s *ServiceBase) DeleteBy{{ .Ref.Name | ToTitle }}({{ .Ref.Name }}Id string) error {
	return s.DeleteBy{{ .Ref.Name | ToTitle }}_({{ .Ref.Name }}Id)
}
{{end}}{{end}}
