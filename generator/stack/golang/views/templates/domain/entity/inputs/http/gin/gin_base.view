// Code generated by TORPEDO DO NOT EDIT.

// Package gin input
package gin

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"errors"
	"fmt"
	"github.com/darksubmarine/torpedo-lib-go"
	"github.com/darksubmarine/torpedo-lib-go/api"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/http/gin_utils"
	"github.com/darksubmarine/torpedo-lib-go/log"
	"github.com/darksubmarine/torpedo-lib-go/object"
	"github.com/darksubmarine/torpedo-lib-go/tql"
	"github.com/gin-gonic/gin"
	"net/http"
	{{if or .HasOptionalFields .HasRelationshipsBelongsTo}}
	"github.com/darksubmarine/torpedo-lib-go/ptr"
	{{end}}
	{{if .HasRelationshipsBelongsTo}}
	"strconv"
	{{end}}

)

// inputGinBase struct to bind Gin Framework with the service CRUD operations
type inputGinBase struct {
	srv {{.PackageName}}.IService
	logger log.ILogger
}

// newInputGinBase constructor function
func newInputGinBase(service {{.PackageName}}.IService, logger log.ILogger) *inputGinBase {
	return &inputGinBase{srv: service, logger: logger}
}

// register adds endpoints to Gin Router.
//
// CRUD endpoints:
//   - Create: [POST]   /{{ .Adapters.Input.Http.ResourceName }}
//   - Read:   [GET]    /{{ .Adapters.Input.Http.ResourceName }}/:id
//   - Update: [PUT]    /{{ .Adapters.Input.Http.ResourceName }}/:id
//   - Delete: [DELETE] /{{ .Adapters.Input.Http.ResourceName }}/:id
//
// Torpedo reserved endpoints:
//   - TQL: [POST] /{{ .Adapters.Input.Http.ResourceName }}/query (Torpedo Query Language: https://darksubmarine.com/docs/torpedo/tql.html)
func (h *inputGinBase) register(g gin.IRouter, withMiddlewares ...*gin_utils.TorpedoMiddleware) {

	var middlewares *gin_utils.CRUDQMiddleware
	if len(withMiddlewares) > 0 {
		middlewares = gin_utils.ToCRUDQMiddlewares(withMiddlewares...)
	}

	if middlewares == nil {

		g.POST("/{{ .Adapters.Input.Http.ResourceName }}/query", h.TQL) // used for TQL

		g.POST("/{{ .Adapters.Input.Http.ResourceName }}", h.Create)
		g.GET("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Read)
		g.PUT("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Update)
		g.DELETE("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Delete)

		//Relationship endpoints
{{if .HasRelationshipsBelongsTo}}{{range .FetchRelationshipsBelongsTo}}
		g.GET("/{{ .Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.FetchBy{{ .Ref.Name | ToTitle }})
		g.POST("/{{ .Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.CreateBy{{ .Ref.Name | ToTitle }})
		g.PUT("/{{ .Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", h.UpdateBy{{ .Ref.Name | ToTitle }})
		g.DELETE("/{{ .Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", h.DeleteBy{{ .Ref.Name | ToTitle }})
		g.DELETE("/{{ .Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.DeleteAllBy{{ .Ref.Name | ToTitle }})

{{end}}{{end}}
		return
	}

	if middlewares.HasQuery() {
		g.POST("/{{ .Adapters.Input.Http.ResourceName }}/query", append(middlewares.Query, h.TQL)...)
	} else {
		g.POST("/{{ .Adapters.Input.Http.ResourceName }}/query",  h.TQL)
	}

	if middlewares.HasCreate() {
		g.POST("/{{ .Adapters.Input.Http.ResourceName }}", append(middlewares.Create, h.Create)...)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.POST("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", append(middlewares.Create, h.CreateBy{{ .Ref.Name | ToTitle }})...)
{{end}}
{{end}}
	} else {
		g.POST("/{{ .Adapters.Input.Http.ResourceName }}", h.Create)
{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.POST("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.CreateBy{{ .Ref.Name | ToTitle }})
{{end}}
{{end}}
	}

	if middlewares.HasRead() {
		g.GET("/{{ $.Adapters.Input.Http.ResourceName }}/:id", append(middlewares.Read, h.Read)...)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.GET("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", append(middlewares.Read, h.FetchBy{{ .Ref.Name | ToTitle }})...)
{{end}}
{{end}}
	} else {
		g.GET("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Read)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.GET("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.FetchBy{{ .Ref.Name | ToTitle }})
{{end}}
{{end}}

	}

	if middlewares.HasUpdate() {
		g.PUT("/{{ .Adapters.Input.Http.ResourceName }}/:id", append(middlewares.Update, h.Update)...)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.PUT("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", append(middlewares.Update, h.UpdateBy{{ .Ref.Name | ToTitle }})...)
{{end}}
{{end}}


	} else {
		g.PUT("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Update)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.PUT("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", h.UpdateBy{{ .Ref.Name | ToTitle }})
{{end}}
{{end}}
	}

	if middlewares.HasDelete() {
		g.DELETE("/{{ .Adapters.Input.Http.ResourceName }}/:id", append(middlewares.Delete, h.Delete)...)
{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.DELETE("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", append(middlewares.Delete, h.DeleteBy{{ .Ref.Name | ToTitle }})...)
		g.DELETE("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", append(middlewares.Delete, h.DeleteAllBy{{ .Ref.Name | ToTitle }})...)
{{end}}
{{end}}
	} else {
		g.DELETE("/{{ .Adapters.Input.Http.ResourceName }}/:id", h.Delete)

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
		g.DELETE("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}/:{{$.Name}}Id", h.DeleteBy{{ .Ref.Name | ToTitle }})
		g.DELETE("/{{.Ref.Adapters.Input.Http.ResourceName }}/:id/{{ $.Adapters.Input.Http.ResourceName }}", h.DeleteAllBy{{ .Ref.Name | ToTitle }})
{{end}}
{{end}}
	}
}

// TQL Torpedo Query Language input controller that calls the service Query method
func (h *inputGinBase) TQL(c *gin.Context) {
	var query tql.Query
	if err := c.ShouldBindJSON(&query); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBindingJSON(err))
		return
	}

	if list, err := h.srv.Query(&query); err != nil {
		if errors.Is(err, tql.ErrInvalidFieldName) || errors.Is(err, tql.ErrInvalidSortFieldNotProjectionMember) {
			c.JSON(http.StatusBadRequest, api.ErrorEntityQueryByUser(err))
		} else {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityQuery(err))
		}
		return
	} else {
		c.JSON(http.StatusOK, list)
	}
}

// Create input controller that calls the service create function
// @Summary create a {{.PackageName}}
// @Schemes http https
// @Description creates an entity {{.EntityName}}
// @Tags {{ .Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param {{.PackageName}} body PartialDTO true "{{.Description}}"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{ .Adapters.Input.Http.ResourceName }} [post]
func (h *inputGinBase) Create(c *gin.Context) {
	var pdto PartialDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.NewError("4001", err))
		return
	}

	h.create(pdto, c)
}

// Update input controller that calls the service update function
// @Summary update a {{.PackageName}}
// @Schemes http https
// @Description updates an entity {{.EntityName}}
// @Tags {{ .Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param id path string true "{{.PackageName}} Id"
// @Param {{.PackageName}} body UpdatableDTO true "{{.Description}}"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{ .Adapters.Input.Http.ResourceName }}/{id} [put]
func (h *inputGinBase) Update(c *gin.Context) {
	var pdto UpdatableDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.NewError("4001", err))
		return
	}

	id := c.Param("id")
	h.update(id, pdto, c)
}

// Read input controller that calls the service read function
// @Summary get a {{.PackageName}}
// @Schemes http https
// @Description get an entity {{.EntityName}} by Id
// @Tags {{ .Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param id path string true "{{.PackageName}} Id"
// @Success 200 {object} FullDTO
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{ .Adapters.Input.Http.ResourceName }}/{id} [get]
func (h *inputGinBase) Read(c *gin.Context) {

    ctx, _ := gin_utils.GetDataContext(c)
	id := c.Param("id")
	ety, err := h.srv.Read(ctx, id)
	if err != nil {
		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			c.JSON(http.StatusNotFound, api.NewError("4004", err))
		} else {
			c.JSON(http.StatusInternalServerError, api.NewError("5003", err))
		}
		return
	}

	if ety == nil {
		c.JSON(http.StatusNotFound, api.NewError("4004", torpedo_lib.ErrIdNotFound))
		return
	}

	if dto, err := FromEntity(ety); err != nil {
		c.JSON(http.StatusInternalServerError, api.NewError("5002", err))
	} else {
		c.JSON(http.StatusOK, dto)
	}
}

// Delete input controller that calls the service delete function
// @Summary remove a {{.PackageName}}
// @Schemes http https
// @Description remove an entity {{.EntityName}} by Id
// @Tags {{ .Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param id path string true "{{.PackageName}} Id"
// @Success 204
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{ .Adapters.Input.Http.ResourceName }}/{id} [delete]
func (h *inputGinBase) Delete(c *gin.Context) {

	id := c.Param("id")
	h.delete(id, c)
}


{{if .HasRelationshipsBelongsTo}}

{{range .FetchRelationshipsBelongsTo}}


// FetchBy{{ .Ref.Name | ToTitle }} input controller that calls the service BelongsTo{{ .Ref.Name | ToTitle }} function
// @Summary get a {{ $.Name }} list
// @Schemes http https
// @Description get list of entity {{ $.EntityName }} given a {{ .Ref.Name}}Id
// @Tags {{ $.Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param id path string true "{{ .Ref.Name }}Id"
// @Param page query int false "the pagination page number"
// @Param items query int false "the amount of items per page"
// @Success 200 {array} FullDTO
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{.Ref.Adapters.Input.Http.ResourceName }}/{id}/{{ $.Adapters.Input.Http.ResourceName }} [get]
func (h *inputGinBase) FetchBy{{ .Ref.Name | ToTitle }}(c *gin.Context) {

	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, api.ErrorEntityQueryByUser(errors.New("{{ .Ref.Name }} id is required")))
		return
	}

	var page int64 = 1
	if sPage := c.Query("page"); sPage != "" {
		if n, err := strconv.ParseInt(sPage, 10, 64); err == nil {
			page = n
		}
	}

	var items int64 = 50
	if sItems := c.Query("items"); sItems != "" {
		if n, err := strconv.ParseInt(sItems, 10, 64); err == nil {
			items = n
		}
	}

	lstEty, err := h.srv.BelongsTo{{ .Ref.Name | ToTitle }}(id, items, page)
	if err != nil {
		c.JSON(http.StatusInternalServerError, api.ErrorEntityQuery(err))
		return
	}

	if len(lstEty) == 0 {
		c.JSON(http.StatusNotFound, api.ErrorNotFound(errors.New("no data where found with the given id")))
		return
	}

	toRet := make([]*FullDTO, len(lstEty))
	for i, ety := range lstEty {
		dto := NewFullDTO()
		if err := entity.To(ety, dto); err != nil {
			h.logger.Error("trying too convert entity to DTO", "error", err)
		}
		toRet[i] = dto
	}

	c.JSON(http.StatusOK, toRet)
}


// Create by {{ .Ref.Name | ToTitle }} input controller that calls the service create function
// @Summary create a {{ $.Name }}
// @Schemes http https
// @Description creates an entity {{ $.EntityName }}
// @Tags {{ $.Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param {{ $.Name }} body PartialDTO true "{{$.Description}}"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{.Ref.Adapters.Input.Http.ResourceName }}/{id}/{{ $.Adapters.Input.Http.ResourceName }} [post]
func (h *inputGinBase) CreateBy{{ .Ref.Name | ToTitle }}(c *gin.Context) {
	var pdto PartialDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.NewError("4001", err))
		return
	}

	pdto.{{ .Ref.Name | ToTitle }}Id_ = ptr.String(c.Param("id"))

	h.create(pdto, c)
}

// Update by {{ .Ref.Name | ToTitle }} input controller that calls the service update function
// @Summary update a {{ $.Name }}
// @Schemes http https
// @Description updates an entity {{ $.EntityName }}
// @Tags {{ $.Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param {{ $.Name }} body UpdatableDTO true "{{$.Description}}"
// @Success 200 {object} FullDTO
// @Failure 400 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{.Ref.Adapters.Input.Http.ResourceName }}/{id}/{{ $.Adapters.Input.Http.ResourceName }}/{ {{- $.Name }}Id} [put]
func (h *inputGinBase) UpdateBy{{ .Ref.Name | ToTitle }}(c *gin.Context) {
	var pdto UpdatableDTO
	if err := c.ShouldBindJSON(&pdto); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBindingJSON(err))
		return
	}

	pdto.{{ .Ref.Name | ToTitle }}Id_ = ptr.String(c.Param("id"))
	id := c.Param("{{$.Name }}Id")
	h.update(id, pdto, c)
}

// DeleteBy{{ .Ref.Name | ToTitle }} input controller that calls the service delete function
// @Summary remove a {{ $.Name }}
// @Schemes http https
// @Description remove an entity {{ $.EntityName}} by Id
// @Tags {{ $.Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param id path string true "{{ $.Name }} Id"
// @Success 204
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{.Ref.Adapters.Input.Http.ResourceName }}/{id}/{{ $.Adapters.Input.Http.ResourceName }}/{ {{- $.Name }}Id} [delete]
func (h *inputGinBase) DeleteBy{{ .Ref.Name | ToTitle }}(c *gin.Context) {
	id := c.Param("{{$.Name}}Id")
	h.delete(id, c)
}


// DeleteAllBy{{ .Ref.Name | ToTitle }} input controller that calls the service delete function
// @Summary remove all {{ $.Name }} given a {{ .Ref.Name }}Id
// @Schemes http https
// @Description remove all entity {{ $.EntityName }} by {{ .Ref.Name }}Id
// @Tags {{ $.Adapters.Input.Http.ResourceName }}
// @Accept json
// @Produce json
// @Param {{ .Ref.Name }}Id path string true "{{ .Ref.Name }} Id"
// @Success 204
// @Failure 404 {object} api.Error
// @Failure 500 {object} api.Error
// @Router /{{.Ref.Adapters.Input.Http.ResourceName }}/{id}/{{ $.Adapters.Input.Http.ResourceName }} [delete]
func (h *inputGinBase) DeleteAllBy{{ .Ref.Name | ToTitle }}(c *gin.Context) {
	id := c.Param("id")
	if err := h.srv.DeleteBy{{ .Ref.Name | ToTitle }}(id); err != nil {
		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			c.JSON(http.StatusNotFound, api.ErrorNotFound(err))
		} else {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityRemove(err))
		}
		return
	}

	c.JSON(http.StatusNoContent, nil)
}

{{end}}

{{end}}

// --- Private methods ---
func (h *inputGinBase) create(pdto PartialDTO, c *gin.Context) {
	if ok, err := object.IsComplete(pdto, optionalFields...); !ok {
		if err != nil {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(err))
		} else {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(fmt.Errorf("all fields are required")))
		}
		return
	}

	{{range .Schema.Fields}}
	{{if .IsOptional }}
	// Default value for {{ .Name }}
	if pdto.{{ .Name | ToTitle }}_ == nil {
		pdto.{{ .Name | ToTitle }}_ = ptr.{{ .Type | toPointerFn }}( {{ .OptionalValue}} )
	}
	{{end}}
	{{end}}


	ety := {{.PackageName}}.New()
	if err := entity.From(&pdto, ety); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBuildingEntityFromDTO(err))
		return
	} else {
	    ctx, _ := gin_utils.GetDataContext(c)
		if created, err := h.srv.Create(ctx, ety); err != nil {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityCreation(err))
			return
		} else {
			returnDto := NewFullDTO()
			if err := entity.To(created,returnDto); err != nil {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityCreation(err)) // TODO replace the error
			}

			c.JSON(http.StatusOK, returnDto)
			return
		}
	}
}

func (h *inputGinBase) update(id string, pdto UpdatableDTO, c *gin.Context) {
	if ok, err := object.IsComplete(pdto, optionalFields...); !ok {
		if err != nil {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(err))
		} else {
			c.JSON(http.StatusBadRequest, api.ErrorPartialEntityIncomplete(fmt.Errorf("all fields are required")))
		}
		return
	}

	{{range .Schema.Fields}}
	{{if .ReadOnly | not }}
	{{if .IsOptional }}
	// Default value for {{ .Name }}
	if pdto.{{ .Name | ToTitle }}_ == nil {
		pdto.{{ .Name | ToTitle }}_ = ptr.{{ .Type | toPointerFn }}( {{ .OptionalValue}} )
	}
	{{end}}{{end}}{{end}}

	ety := {{.PackageName}}.New()
	if err := entity.From(&pdto, ety); err != nil {
		c.JSON(http.StatusBadRequest, api.ErrorBuildingEntityFromDTO(err))
		return
	} else {
		ety.SetId(id)
		ctx, _ := gin_utils.GetDataContext(c)
		if updated, err := h.srv.Update(ctx, ety); err != nil {
			if errors.Is(err, torpedo_lib.ErrIdNotFound) {
				c.JSON(http.StatusNotFound, api.ErrorNotFound(err))
			} else {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityUpdate(err))
			}
			return
		} else {
			returnDto := NewFullDTO()
			if err := entity.To(updated,returnDto); err != nil {
				c.JSON(http.StatusInternalServerError, api.ErrorEntityUpdate(err))
			}

			c.JSON(http.StatusOK, returnDto)
			return
		}
	}
}

func (h *inputGinBase) delete(id string, c *gin.Context) {
    ctx, _ := gin_utils.GetDataContext(c)
	if err := h.srv.Delete(ctx, id); err != nil {
		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			c.JSON(http.StatusNotFound, api.ErrorNotFound(err))
		} else {
			c.JSON(http.StatusInternalServerError, api.ErrorEntityRemove(err))
		}
		return
	}

	c.JSON(http.StatusNoContent, nil)
}
