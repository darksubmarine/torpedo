// Code generated by TORPEDO DO NOT EDIT.

// Package redis_sql is an output adapter to store entities into sql database with redis as cache layer
package redis_sql

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	redisOutput "{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}/outputs/redis"
	sqlOutput "{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}/outputs/sql"
	"database/sql"
	"errors"
	"fmt"
	torpedo_lib "github.com/darksubmarine/torpedo-lib-go"
	"github.com/darksubmarine/torpedo-lib-go/tql"
	"github.com/go-redis/redis/v8"
)

// redisSqlRepositoryBase Redis+Sql output repository.
// Custom repository logic should be placed here.
type redisSqlRepositoryBase struct {
	redisRepo {{.PackageName}}.IRepository
	sqlRepo   {{.PackageName}}.IRepository
}

// NewRedisSqlRepositoryBase repository constructor
func newRedisSqlRepositoryBase(client *redis.Client, db *sql.DB, driverName string, cryptoKey []byte) *redisSqlRepositoryBase {
	return &redisSqlRepositoryBase{
		redisRepo: redisOutput.NewRedisRepository(client, cryptoKey),
		sqlRepo:   sqlOutput.NewSqlRepository(db, driverName, cryptoKey),
	}
}

// Save adds the entity in Redis cache and SqlDB
func (r *redisSqlRepositoryBase) Save(entity *{{.PackageName}}.{{.EntityName}}) error {

	if err := r.sqlRepo.Save(entity); err != nil {
		return fmt.Errorf("%w %s", ErrorSavingOnSqlDB, err)
	} else {
		if err := r.redisRepo.Save(entity); err != nil {
			return fmt.Errorf("%w %s", ErrSavingOnCache, err)
		}
	}

	return nil
}

// FetchByID fetch entity by ID. First try to fetch it from redis cache and if it is not found try from SqlDB
func (r *redisSqlRepositoryBase) FetchByID(id string) (*{{.PackageName}}.{{.EntityName}}, error) {

	if entityFromRedis, err := r.redisRepo.FetchByID(id); err != nil {

		if errors.Is(err, torpedo_lib.ErrIdNotFound) {
			if entityFromSql, err := r.sqlRepo.FetchByID(id); err != nil {
				return nil, err
			} else {
				_ = r.redisRepo.Update(entityFromSql) // if object is not in redis, save it!
				return entityFromSql, nil
			}
		}
		return nil, err
	} else {
		return entityFromRedis, nil
	}
}

// Update updates the stored entity in redis and sql database
func (r *redisSqlRepositoryBase) Update(entity *{{.PackageName}}.{{.EntityName}}) error {
	if err := r.sqlRepo.Update(entity); err != nil {
		return fmt.Errorf("%w %s", ErrorSavingOnSqlDB, err)
	} else {
		if err := r.redisRepo.Update(entity); err != nil {
			return fmt.Errorf("%w %s", ErrSavingOnCache, err)
		}
	}

	return nil
}

// DeleteByID removes the entity with the given ID. First try to remove it from sql database (source of truth) and next from Redis cache
func (r *redisSqlRepositoryBase) DeleteByID(id string) error {
	if err := r.sqlRepo.DeleteByID(id); err != nil {
		return fmt.Errorf("%w %s", ErrorDeletingOnSqlDB, err)
	} else {
		if err := r.redisRepo.DeleteByID(id); err != nil {
			if errors.Is(err, torpedo_lib.ErrIdNotFound) {
				return nil // no error because we are removing entity and was already deleted from Redis, maybe by TTL
			}
			return fmt.Errorf("%w %s", ErrDeletingOnCache, err)
		}
	}
	return nil
}


{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
// DeleteBy{{ .Ref.Name | ToTitle }} removes the entity by {{ .Ref.Name }}Id
func (r *redisSqlRepositoryBase) DeleteBy{{ .Ref.Name | ToTitle }}({{ .Ref.Name }}Id string) error {

	if err := r.sqlRepo.DeleteBy{{ .Ref.Name | ToTitle }}({{ .Ref.Name }}Id); err != nil {
		return fmt.Errorf("%w %s", ErrorDeletingOnSqlDB, err)
	}

	// TODO remove from REDIS if not this is a consistency issue
	//return ErrDeletingOnCache
	return nil
}
{{end}}{{end}}

// Query Torpedo Query Language is calling directly to sql repository due to redis doesn't support it
func (r *redisSqlRepositoryBase) Query(q *tql.Query, metadata map[string]string) ([]*{{.PackageName}}.{{.EntityName}}, error) {
	return r.sqlRepo.Query(q, metadata)
}
