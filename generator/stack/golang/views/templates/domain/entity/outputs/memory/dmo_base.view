// Code generated by Torpedo DO NOT EDIT.

// Package memory implements in memory output
package memory

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"github.com/darksubmarine/torpedo-lib-go/entity"
)

// EntityDMOMemory Data Mapper Object to the memory output
type EntityDMOMemory struct {
	*{{.PackageName}}.EntityDMO

	Id_      string {{backQuote}}json:"id"{{backQuote}}
	Created_ int64  {{backQuote}}json:"created"{{backQuote}}
	Updated_ int64  {{backQuote}}json:"updated"{{backQuote}}

	{{range .Schema.Fields}}
	{{ .Name | ToTitle }}_	{{ .FieldType }} {{backQuote}}json:"{{ .Name }},omitempty" {{if .Encrypted }}torpedo.field:"encrypted"{{end}}{{backQuote}}{{end}}

	DMO
}


// NewEntityDMOMemory constructor function
func NewEntityDMOMemory(key []byte) *EntityDMOMemory {
	dmo := new(EntityDMOMemory)
	dmo.EntityDMO = {{.PackageName}}.NewEntityDMO(key)
	dmo.DMO.EntityDMO = dmo.EntityDMO
	return dmo
}

// NewEntityDMOMemoryFrom constructor function from {{.PackageName}}.{{.EntityName}}
func NewEntityDMOMemoryFrom(ety *{{.PackageName}}.{{.EntityName}}, key []byte) (*EntityDMOMemory, error) {
	d := NewEntityDMOMemory(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}

	return d, nil
}

// Id getter method
func (dmo *EntityDMOMemory) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOMemory) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOMemory) Updated() int64 { return dmo.Updated_ }

{{range .Schema.Fields}}
{{if .Encrypted }}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOMemory) {{ .Name | ToTitle }}() ({{ .FieldType }}, error) {
	return dmo.DecryptString(dmo.{{ .Name | ToTitle }}_)
}
{{else}}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOMemory) {{ .Name | ToTitle }}() {{ .FieldType }} { return dmo.{{ .Name | ToTitle }}_ }
{{end}}
{{end}}

// ToEntity returns a {{.PackageName}}.{{.EntityName}} from the DMO object
func (dmo *EntityDMOMemory) ToEntity() (*{{.PackageName}}.{{.EntityName}}, error) {
	ety := {{.PackageName}}.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the {{.PackageName}}.{{.EntityName}}
func (dmo *EntityDMOMemory) HydrateFromEntity(ety *{{.PackageName}}.{{.EntityName}}) error {
	return entity.To(ety, dmo)
}
