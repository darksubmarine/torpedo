// Code generated by TORPEDO DO NOT EDIT.

// Package redis implements Redis output
package redis

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"context"
	"errors"
	torpedo_lib "github.com/darksubmarine/torpedo-lib-go"
	"github.com/darksubmarine/torpedo-lib-go/tql"
	"github.com/go-redis/redis/v8"
)

// redisRepositoryBase Redis repository implements {{.PackageName}}.IRepositoryBase
type redisRepositoryBase struct {
	client *redis.Client
	ckey   []byte
}

// newRedisRepositoryBase base repository constructor
func newRedisRepositoryBase(client *redis.Client, cryptoKey []byte) *redisRepositoryBase {
	return &redisRepositoryBase{client: client, ckey: cryptoKey}
}

// Save adds the entity in Redis cache
func (r *redisRepositoryBase) Save(entity *{{.PackageName}}.{{.EntityName}}) error {
	dmo, err := NewEntityDMORedisFrom(entity, r.ckey)
	if err != nil {
		return err
	}
	res := r.client.Set(context.TODO(), dmo.key(), dmo.String(), ObjectTTL)
	if res.Err() != nil {
		return res.Err()
	}

	return nil
}

// FetchByID fetch entity by ID
func (r *redisRepositoryBase) FetchByID(id string) (*{{.PackageName}}.{{.EntityName}}, error) {
	res := r.client.Get(context.TODO(), redisEntityKey(id))
	err := res.Err()
	if errors.Is(err, redis.Nil) {
		return nil, torpedo_lib.ErrIdNotFound
	} else if err != nil {
		return nil, err
	}

	dmo, err := NewEntityDMORedisFromJSON(res.Val(), r.ckey)
	if err != nil {
		return nil, err
	}

	return dmo.ToEntity()
}

// Update updates the stored entity
func (r *redisRepositoryBase) Update(entity *{{.PackageName}}.{{.EntityName}}) error {
	id := entity.Id()
	if id == "" {
		return torpedo_lib.ErrEmptyId
	}

	dmo, err := NewEntityDMORedisFrom(entity, r.ckey)
	if err != nil {
		return err
	}

	res := r.client.Set(context.TODO(), dmo.key(), dmo.String(), ObjectTTL)
	if res.Err() != nil {
		return res.Err()
	}

	return nil
}

// DeleteByID removes the entity with the given ID
func (r *redisRepositoryBase) DeleteByID(id string) error {
	key := redisEntityKey(id)

	res := r.client.Del(context.TODO(), key)
	if res.Err() != nil {
		return res.Err()
	}

	if res.Val() == 0 {
		return torpedo_lib.ErrIdNotFound
	}

	return nil
}

{{if .HasRelationshipsBelongsTo}}
{{range .FetchRelationshipsBelongsTo}}
// DeleteBy{{ .Ref.Name | ToTitle }} removes the entity by {{ .Ref.Name }}Id
func (r *redisRepositoryBase) DeleteBy{{ .Ref.Name | ToTitle }}({{ .Ref.Name }}Id string) error {
	return errors.New("operation DeleteBy{{ .Ref.Name | ToTitle }} is not supported by this repository")
}
{{end}}{{end}}

// Query Torpedo Query Language is not supported by this repository
func (r *redisRepositoryBase) Query(q *tql.Query, metadata map[string]string) ([]*{{.PackageName}}.{{.EntityName}}, error) {
	return nil, tql.ErrTQLNotSupported
}
