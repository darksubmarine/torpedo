// Code generated by TORPEDO DO NOT EDIT.

// Package mongodb is an output adapter to store entities in MongoDB
package mongodb

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/storage/mongodb_utils"
	"go.mongodb.org/mongo-driver/bson"
)

// EntityDMOMongoDB Data Mapper Object (DMO) to store entity into MongoDB
type EntityDMOMongoDB struct {
	*{{.PackageName}}.EntityDMO {{backQuote}}bson:"-"{{backQuote}}

	Id_           string {{backQuote}}bson:"_id"{{backQuote}}
	Created_      int64  {{backQuote}}bson:"created"{{backQuote}}
	Updated_      int64  {{backQuote}}bson:"updated"{{backQuote}}

	{{range .Schema.Fields}}
	{{ .Name | ToTitle }}_	{{ .FieldType }} {{backQuote}}bson:"{{ .Name }}" {{if .Encrypted }}torpedo.field:"encrypted"{{end}}{{backQuote}}{{end}}

	DMO {{backQuote}}bson:"inline"{{backQuote}}
}

// NewEntityDMOMongoDB constructor function
//
//	 params:
//			- key []byte is the encryption key for the encrypted fields
func NewEntityDMOMongoDB(key []byte) *EntityDMOMongoDB {
	dmo := new(EntityDMOMongoDB)
	dmo.EntityDMO = {{.PackageName}}.NewEntityDMO(key)
	dmo.DMO.EntityDMO = dmo.EntityDMO // TODO review this line. It is to support encryption at custom DMO
	return dmo
}

// NewEntityDMOMongoDBFrom DMO constructor function from a given {{.PackageName}}.{{.EntityName}}.
//
//	 params:
//			- ety: *{{.PackageName}}.{{.EntityName}} entity from the DMO will be created
//			- key: []byte is the encryption key for the encrypted fields
func NewEntityDMOMongoDBFrom(ety *{{.PackageName}}.{{.EntityName}}, key []byte) (*EntityDMOMongoDB, error) {
	d := NewEntityDMOMongoDB(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}
	return d, nil
}

// Id getter method
func (dmo *EntityDMOMongoDB) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOMongoDB) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOMongoDB) Updated() int64 { return dmo.Updated_ }

{{range .Schema.Fields}}
{{if .Encrypted }}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOMongoDB) {{ .Name | ToTitle }}() ({{ .FieldType }}, error) {
    return dmo.DecryptString(dmo.{{ .Name | ToTitle }}_)
}
{{else}}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOMongoDB) {{ .Name | ToTitle }}() {{ .FieldType }} { return dmo.{{ .Name | ToTitle }}_ }
{{end}}
{{end}}

// ToEntity returns a {{.PackageName}}.{{.EntityName}} from the DMO object
func (dmo *EntityDMOMongoDB) ToEntity() (*{{.PackageName}}.{{.EntityName}}, error) {
	ety := {{.PackageName}}.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the {{.PackageName}}.{{.EntityName}}
func (dmo *EntityDMOMongoDB) HydrateFromEntity(ety *{{.PackageName}}.{{.EntityName}}) error {
	return entity.To(ety, dmo)
}


// updateDocument mapper function from DMO to bson.D to update document into the mongoDB collection
func (dmo *EntityDMOMongoDB) updateDocument(metadata map[string]*entity.FieldMetadata) bson.D {
	bsonD := mongodb_utils.ToBSONDocument(dmo, metadata,"Id_", "Created_")
	return bson.D{ {"$set", bsonD} }
}
