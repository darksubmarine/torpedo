// Code generated by TORPEDO DO NOT EDIT.

// Package sql is an output adapter to store entities in relational databases
package sql

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"github.com/darksubmarine/torpedo-lib-go/entity"
)

// EntityDMOSql Data Mapper Object (DMO) to store entity into SQL database
type EntityDMOSql struct {
	*{{.PackageName}}.EntityDMO

	Id_           string {{backQuote}}db:"id"{{backQuote}}
	Created_      int64  {{backQuote}}db:"created"{{backQuote}}
	Updated_      int64  {{backQuote}}db:"updated"{{backQuote}}

	{{range .Schema.Fields}}
	{{ .Name | ToTitle }}_	{{ .FieldType }} {{backQuote}}db:"{{ .Name }}" {{if .Encrypted }}torpedo.field:"encrypted"{{end}}{{backQuote}}{{end}}

	DMO
}

// NewEntityDMOSql constructor function
//
//	 params:
//			- key []byte is the encryption key for the encrypted fields
func NewEntityDMOSql(key []byte) *EntityDMOSql {
	dmo := new(EntityDMOSql)
	dmo.EntityDMO = {{.PackageName}}.NewEntityDMO(key)
	return dmo
}

// NewEntityDMOSqlFrom DMO constructor function from a given {{.PackageName}} entity.
//
//	 params:
//			- ety: *{{.PackageName}}.{{.EntityName}} entity from the DMO will be created
//			- key: []byte is the encryption key for the encrypted fields
func NewEntityDMOSqlFrom(ety *{{.PackageName}}.{{.EntityName}}, key []byte) (*EntityDMOSql, error) {
	d := NewEntityDMOSql(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}
	return d, nil
}

// Id getter method
func (dmo *EntityDMOSql) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMOSql) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMOSql) Updated() int64 { return dmo.Updated_ }


{{range .Schema.Fields}}
{{if .Encrypted }}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOSql) {{ .Name | ToTitle }}() ({{ .FieldType }}, error) {
	return dmo.DecryptString(dmo.{{ .Name | ToTitle }}_)
}
{{else}}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMOSql) {{ .Name | ToTitle }}() {{ .FieldType }} { return dmo.{{ .Name | ToTitle }}_ }
{{end}}
{{end}}

// ToEntity returns a {{.PackageName}}.{{.EntityName}} from the DMO object
func (dmo *EntityDMOSql) ToEntity() (*{{.PackageName}}.{{.EntityName}}, error) {
	ety := {{.PackageName}}.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil
}

// HydrateFromEntity populates the DMO fields from the {{.PackageName}}.{{.EntityName}}
func (dmo *EntityDMOSql) HydrateFromEntity(ety *{{.PackageName}}.{{.EntityName}}) error {
	return entity.To(ety, dmo)
}

