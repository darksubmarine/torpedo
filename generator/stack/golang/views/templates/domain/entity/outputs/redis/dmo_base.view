// Code generated by TORPEDO DO NOT EDIT.

// Package redis implements Redis output
package redis

import (
	"{{ .Meta.Package }}{{ .Meta.EntityPath }}/{{.PackageName}}"
	"encoding/json"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/storage/redis_utils"
)

// EntityDMORedis Data Mapper Object (DMO) to store entity into Redis cache
type EntityDMORedis struct {
	*{{.PackageName}}.EntityDMO

	Id_      string {{backQuote}}json:"id"{{backQuote}}
	Created_ int64  {{backQuote}}json:"created"{{backQuote}}
	Updated_ int64  {{backQuote}}json:"updated"{{backQuote}}

	{{range .Schema.Fields}}
	{{ .Name | ToTitle }}_	{{ .FieldType }} {{backQuote}}json:"{{ .Name }},omitempty" {{if .Encrypted }}torpedo.field:"encrypted"{{end}}{{backQuote}}{{end}}

	DMO
}

// NewEntityDMORedis constructor function
//
//	 params:
//			- key []byte is the encryption key for the encrypted fields
func NewEntityDMORedis(key []byte) *EntityDMORedis {
	dmo := new(EntityDMORedis)
	dmo.EntityDMO = {{.PackageName}}.NewEntityDMO(key)

	return dmo
}

// NewEntityDMORedisFrom DMO constructor function from a given {{.PackageName}} entity.
//
//	 params:
//			- ety: *{{.PackageName}}.{{.EntityName}} entity from the DMO will be created
//			- key: []byte is the encryption key for the encrypted fields
func NewEntityDMORedisFrom(ety *{{.PackageName}}.{{.EntityName}}, key []byte) (*EntityDMORedis, error) {
	d := NewEntityDMORedis(key)
	if err := entity.To(ety, d); err != nil {
		return nil, err
	}
	return d, nil
}

// NewEntityDMORedisFromJSON DMO constructor function from a given {{.PackageName}} entity.
//
//	 params:
//			- str: string entity JSON representation
//			- key: []byte is the encryption key for the encrypted fields
func NewEntityDMORedisFromJSON(str string, key []byte) (*EntityDMORedis, error) {
	entity := NewEntityDMORedis(key)
	if err := json.Unmarshal([]byte(str), entity); err != nil {
		return nil, err
	}

	return entity, nil
}

// Id getter method
func (dmo *EntityDMORedis) Id() string { return dmo.Id_ }

// Created getter method
func (dmo *EntityDMORedis) Created() int64 { return dmo.Created_ }

// Updated getter method
func (dmo *EntityDMORedis) Updated() int64 { return dmo.Updated_ }


{{range .Schema.Fields}}
{{if .Encrypted }}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMORedis) {{ .Name | ToTitle }}() ({{ .FieldType }}, error) {
	return dmo.DecryptString(dmo.{{ .Name | ToTitle }}_)
}
{{else}}
// {{ .Name | ToTitle }} getter method
func (dmo *EntityDMORedis) {{ .Name | ToTitle }}() {{ .FieldType }} { return dmo.{{ .Name | ToTitle }}_ }
{{end}}
{{end}}

// ToEntity returns a {{.PackageName}}.{{.EntityName}} from the DMO object
func (dmo *EntityDMORedis) ToEntity() (*{{.PackageName}}.{{.EntityName}}, error) {
	ety := {{.PackageName}}.New()
	if err := entity.From(dmo, ety); err != nil {
		return nil, err
	}
	return ety, nil

}

// HydrateFromEntity populates the DMO fields from the {{.PackageName}}.{{.EntityName}}
func (dmo *EntityDMORedis) HydrateFromEntity(ety *{{.PackageName}}.{{.EntityName}}) error {
	return entity.To(ety, dmo)
}

// key redis key getter
func (dmo *EntityDMORedis) key() string {
	return redisEntityKey(dmo.Id_)
}

// String Stringer implementation
func (dmo *EntityDMORedis) String() string {
	strb, _ := json.Marshal(dmo)
	return string(strb)
}

// redisEntityKey returns an entity key for Redis object
func redisEntityKey(id string) string {
	return redis_utils.EntityKey({{.PackageName}}.Name, id)
}
