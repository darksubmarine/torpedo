// Code generated by Torpedo DO NOT EDIT.

// Package {{.PackageName}} {{.Description}}
package {{.PackageName}}

import (
	"bytes"
	"fmt"
	"github.com/darksubmarine/torpedo-lib-go/entity"
	"github.com/darksubmarine/torpedo-lib-go/validator"
	"github.com/darksubmarine/torpedo-lib-go/trn"

{{if .HasNestedLoading }}
	{{range .FetchNestedLoading}}
		"{{ .Ref.Meta.Package }}{{ .Ref.Meta.EntityPath }}/{{.Ref.PackageName}}"
{{end}}{{end}}
)

const (
	fieldId           = "id"
	fieldCreated      = "created"
	fieldUpdated      = "updated"
{{range .Schema.Fields}} field{{ .Name | ToTitle }} = "{{ .Name }}"
{{end}}

)

var _fieldsMap entity.FieldMap
var _fieldsMetadata map[string]*entity.FieldMetadata

func init() {
    instance := New()
	_fieldsMap = entity.ToFieldMap(instance)
	_fieldsMetadata = entity.FieldsMetadata(instance)
}

// FieldsMetadata returns the {{.PackageName}} Entity fields metadata.
func FieldsMetadata() map[string]*entity.FieldMetadata { return _fieldsMetadata }

type entityBase struct {
	id      string
	created int64
	updated int64

{{range .Schema.Fields}}
  {{if .HasDescription }}// {{ .Name }} {{ .Description}}{{else}}{{end}}
{{ .Name }} {{ .FieldType }}
{{end}}

	{{if .HasNestedLoading }}
	// NestedLoading decoration relationships
	{{range .FetchNestedLoading}}
	{{if isHasOne .Cardinality }}
	    {{.Ref.Name}} *{{ .Ref.PackageName }}.{{ .Ref.EntityName}} {{backQuote}}torpedo.rel:"hasOne"{{backQuote}}
	{{else}}
		{{.Ref.PluralName}} []*{{ .Ref.PackageName }}.{{ .Ref.Name | ToTitle}}Entity {{backQuote}}torpedo.rel:"hasMany"{{backQuote}}
	{{end}}
	{{end}}
	{{end}}

	validators map[string]validator.IValidator
}

func newEntityBase() *entityBase {
	return new(entityBase).init()
}

func (e *entityBase) init() *entityBase {
	e.validators = map[string]validator.IValidator{}

{{range .Schema.Fields}}
  {{if .HasValidation }}
    e.validators[field{{ .Name | ToTitle }}] = validator.{{ .Validator.ConstructorCode}}
  {{end}}
{{end}}

	return e
}


func (e *entityBase) FieldsMetadata() map[string]*entity.FieldMetadata { return _fieldsMetadata }

func (e *entityBase) TRN() *trn.TRN { return entity.TRN(Name, e.id) }

func (e *entityBase) Id() string     { return e.id }
func (e *entityBase) Created() int64 { return e.created }
func (e *entityBase) Updated() int64 { return e.updated }

func (e *entityBase) SetId(id string) { e.id = id }
func (e *entityBase) SetCreated(created int64) { e.created = created }
func (e *entityBase) SetUpdated(updated int64) { e.updated = updated }

{{range .Schema.Fields}}
{{if .HasDescription }}// {{ .Name | ToTitle }} {{ .Description}}{{end}}
func (e *entityBase) {{ .Name | ToTitle }}() {{ .FieldType }} { return e.{{ .Name }} }

{{if .HasDescription }}// Set{{ .Name | ToTitle }} {{ .Description}}{{end}}
func (e *entityBase) Set{{ .Name | ToTitle }}({{ .Name }} {{ .FieldType }}) error {

{{if .HasValidation }}
	if !e.validators[field{{ .Name | ToTitle }}].Value({{ .Name }}).IsValid() {
		return ErrInvalid{{ .Name | ToTitle }}
	}
{{end}}

	e.{{ .Name }} = {{ .Name }}
	return nil
}
{{end}}


{{if .HasNestedLoading }}
	// NestedLoading relationships
	{{range .FetchNestedLoading}}
	{{if isHasOne .Cardinality }}

// {{.Ref.Name | ToTitle}} returns an instance of {{.Ref.Name}}
func (e *entityBase) {{.Ref.Name | ToTitle}}() *{{ .Ref.PackageName }}.{{ .Ref.Name | ToTitle}}Entity {
	return e.{{.Ref.Name}}
}

// Set{{.Ref.Name | ToTitle}} sets an instance of {{.Ref.Name}}
func (e *entityBase) Set{{.Ref.Name | ToTitle}}({{.Ref.Name}}Model *{{ .Ref.PackageName }}.{{ .Ref.Name | ToTitle}}Entity) {
	e.{{.Ref.Name}} = {{.Ref.Name}}Model
}

	{{else}}

// {{.Ref.PluralName | ToTitle}} returns a list of {{.Ref.PluralName}}
func (e *entityBase) {{.Ref.PluralName | ToTitle}}() []*{{ .Ref.PackageName }}.{{ .Ref.Name | ToTitle}}Entity {
	return e.{{.Ref.PluralName}}
}

// Set{{.Ref.PluralName | ToTitle}} sets a list of {{.Ref.PluralName}}
func (e *entityBase) Set{{.Ref.PluralName | ToTitle}}({{.Ref.PluralName}} []*{{ .Ref.PackageName }}.{{ .Ref.Name | ToTitle}}Entity) {
	e.{{.Ref.PluralName}} = {{.Ref.PluralName}}
}
    {{end}}
	{{end}}
	{{end}}



// String returns the string representation of the entityBase
func (e *entityBase) String() string {
	buf := bytes.NewBufferString("")
	buf.WriteString("{{.PackageName}}.entityBase{ ")
	buf.WriteString(fmt.Sprintf("%s=%v ", "id", e.id))
	buf.WriteString(fmt.Sprintf("%s=%v ", "created", e.created))
	buf.WriteString(fmt.Sprintf("%s=%v ", "updated", e.updated)){{range .Schema.Fields}}
	buf.WriteString(fmt.Sprintf("%s=%v ", "{{ .Name }}", e.{{ .Name }}  )){{end}}
	buf.WriteString("}")
	return buf.String()
}